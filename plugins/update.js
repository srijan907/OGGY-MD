const { cmd } = require("../command");
const axios = require('axios');
const fs = require('fs');
const path = require("path");
const AdmZip = require("adm-zip");

cmd({
  pattern: "update",
  alias: ["upgrade", "up"],
  react: 'üìÆ',
  desc: "Update the bot to the latest version.",
  category: "misc",
  filename: __filename
}, async (client, message, args, { from, reply, sender, isOwner }) => {
  if (!isOwner) {
    return reply("*üìõ ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä.*");
  }

  try {
    await reply("*üì° ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ “ì·¥è Ä Woker-·¥ç·¥Ö ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás...*");
    
    // Get latest commit from GitHub
    const { data: commitData } = await axios.get(
      "https://api.github.com/repos/srijan907/WOKER-MD-V2/commits/main"
    );
    const latestCommitHash = commitData.sha;

    // Get current commit hash
    let currentHash = 'unknown';
    try {
      const packageJson = require('../package.json');
      currentHash = packageJson.commitHash || 'unknown';
    } catch (error) {
      console.error("Error reading package.json:", error);
    }

    if (latestCommitHash === currentHash) {
      return reply("*‚òá Woker-·¥ç·¥Ö …™s ·¥è…¥ ·¥õ ú·¥á  ü·¥Ä·¥õ·¥ás·¥õ ·¥†·¥á Äs…™·¥è…¥: ü§ñ·™≥·™≥Õé*");
    }

    await reply("*‚è∞ Woker-·¥ç·¥Ö  ô·¥è·¥õ ·¥ú·¥ò·¥Ö·¥Ä·¥õ…™…¥…¢...*");
    
    // Download latest code
    const zipPath = path.join(__dirname, "latest.zip");
    const { data: zipData } = await axios.get(
      "https://github.com/srijan907/WOKER-MD-V2/archive/main.zip",
      { responseType: "arraybuffer" }
    );
    fs.writeFileSync(zipPath, zipData);

    await reply("*üì¶ ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ…™…¥…¢ ·¥õ ú·¥á  ü·¥Ä·¥õ·¥ás·¥õ ·¥Ñ·¥è·¥Ö·¥á...*");
    
    // Extract ZIP file
    const extractPath = path.join(__dirname, 'latest');
    const zip = new AdmZip(zipPath);
    zip.extractAllTo(extractPath, true);

    await reply("*üîÑ  Ä·¥á·¥ò ü·¥Ä·¥Ñ…™…¥…¢ “ì…™ ü·¥ás...*");
    
    // Copy updated files
    const sourcePath = path.join(extractPath, "WOKER-MD-V2-main");
    const destinationPath = path.join(__dirname, '..');
    copyFolderSync(sourcePath, destinationPath);

    // Cleanup
    fs.unlinkSync(zipPath);
    fs.rmSync(extractPath, { recursive: true, force: true });

    await reply("*üîÑ  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è ·¥Ä·¥ò·¥ò ü è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás...*");
    process.exit(0);
  } catch (error) {
    console.error("Update error:", error);
    reply("*‚ùå ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á “ì·¥Ä…™ ü·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥ç·¥Ä…¥·¥ú·¥Ä ü ü è.*");
  }
});

// Helper function to copy directories
function copyFolderSync(source, target) {
  if (!fs.existsSync(target)) {
    fs.mkdirSync(target, { recursive: true });
  }

  const items = fs.readdirSync(source);
  for (const item of items) {
    const srcPath = path.join(source, item);
    const destPath = path.join(target, item);

    if (fs.lstatSync(srcPath).isDirectory()) {
      copyFolderSync(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
  }
